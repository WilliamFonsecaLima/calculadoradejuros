import streamlit as st
import pandas as pd
#import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Calculadora de Juros Compostos",
    page_icon="üìä",
    layout="centered"
)

# T√≠tulo e descri√ß√£o
st.title("üìä Calculadora de Juros Compostos")
st.markdown("""
Saiba quanto sua aplica√ß√£o pode render de forma simples utilizando juros compostos.
**Juros compostos** s√£o os juros calculados sobre o valor inicial e tamb√©m sobre os juros acumulados anteriormente.
""")

# Divis√£o em colunas para melhor organiza√ß√£o
col1, col2 = st.columns([2, 1])

with col1:
    # Entrada de dados com melhorias de UX
    st.subheader("Dados da Aplica√ß√£o")
    
    # Usando expansores para organizar as entradas
    with st.expander("Valores", expanded=True):
        D = st.number_input(
            "Valor Inicial (R$)", 
            min_value=0.0, 
            value=1000.0, 
            step=100.0,
            format='%.2f',
            help="Valor inicial do investimento"
        )
        
        I = st.number_input(
            "Taxa de Juros Mensal (%)", 
            min_value=0.0, 
            value=5.0, 
            step=0.5,
            format='%.2f',
            help="Taxa de juros mensal em percentual"
        )
        
        T = st.number_input(
            "Per√≠odo (meses)", 
            min_value=1, 
            value=12, 
            step=1,
            help="Tempo total da aplica√ß√£o em meses"
        )
    
    # Informa√ß√µes adicionais
    with st.expander("Sobre a taxa de juros", expanded=False):
        st.info("""
        Lembre-se:
        - Taxa de poupan√ßa: ~0,5% ao m√™s
        - CDB: 0,8% a 1,2% ao m√™s
        - Tesouro Direto: 0,6% a 1,0% ao m√™s
        - A√ß√µes: vari√°vel (podendo ser negativa)
        """)

with col2:
    # Card de resultado
    st.subheader("Resultado")
    
    # C√°lculo do montante
    if I > 0 and T > 0:
        I_decimal = I / 100  # Convertendo para decimal
        C = D * (1 + I_decimal) ** T
        juros = C - D
        
        st.metric("Valor Inicial", f"R$ {D:,.2f}".replace(',', '.'))
        st.metric("Total de Juros", f"R$ {juros:,.2f}".replace(',', '.'))
        st.metric("Montante Final", f"R$ {C:,.2f}".replace(',', '.'), 
                 delta=f"{I}% ao m√™s")
    else:
        st.warning("Informe valores positivos para taxa e per√≠odo")

# Bot√£o de calcular
if st.button("Calcular Proje√ß√£o", type="primary"):
    if I <= 0 or T <= 0 or D <= 0:
        st.error("Por favor, insira valores v√°lidos (maiores que zero).")
    else:
        # C√°lculo da proje√ß√£o m√™s a m√™s
        I_decimal = I / 100
        meses = []
        valores = []
        juros_acumulados = []
        
        for mes in range(T + 1):
            valor_mes = D * (1 + I_decimal) ** mes
            meses.append(mes)
            valores.append(valor_mes)
            juros_acumulados.append(valor_mes - D)
        
        # Criando DataFrame para exibi√ß√£o
        df = pd.DataFrame({
            'M√™s': meses,
            'Valor': valores,
            'Juros Acumulados': juros_acumulados
        })
        
        # Formatando valores para exibi√ß√£o
        df_display = df.copy()
        df_display['Valor'] = df_display['Valor'].apply(lambda x: f'R$ {x:,.2f}'.replace(',', '.'))
        df_display['Juros Acumulados'] = df_display['Juros Acumulados'].apply(lambda x: f'R$ {x:,.2f}'.replace(',', '.'))
        
        # Exibindo tabela
        st.subheader("Proje√ß√£o M√™s a M√™s")
        st.dataframe(df_display, hide_index=True, use_container_width=True)
        
        # Gr√°fico de proje√ß√£o
        st.subheader("Evolu√ß√£o do Investimento")
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=df['M√™s'], 
            y=df['Valor'],
            mode='lines+markers',
            name='Montante',
            line=dict(color='#4CAF50', width=3),
            marker=dict(size=6)
        ))
        
        fig.add_trace(go.Scatter(
            x=df['M√™s'], 
            y=df['Juros Acumulados'],
            mode='lines',
            name='Juros Acumulados',
            line=dict(color='#FF9800', width=2, dash='dot'),
            fill='tozeroy',
            opacity=0.3
        ))
        
        fig.update_layout(
            xaxis_title="Meses",
            yaxis_title="Valor (R$)",
            hovermode="x unified",
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
            plot_bgcolor='rgba(0,0,0,0.05)'
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Gr√°fico de composi√ß√£o
        st.subheader("Composi√ß√£o do Montante Final")
        
        fig_pie = px.pie(
            values=[D, juros],
            names=['Valor Principal', 'Juros'],
            color=['Valor Principal', 'Juros'],
            color_discrete_map={'Valor Principal':'lightblue', 'Juros':'orange'}
        )
        
        fig_pie.update_traces(textposition='inside', textinfo='percent+label+value')
        st.plotly_chart(fig_pie, use_container_width=True)

# Informa√ß√µes adicionais
st.divider()
st.subheader("üí° Sobre Juros Compostos")
st.markdown("""
Os juros compostos s√£o considerados a **oitava maravilha do mundo** (segundo Albert Einstein) 
porque permitem que seu dinheiro cres√ßa exponencialmente com o tempo.

**F√≥rmula utilizada:**  
`M = P √ó (1 + i)‚Åø`  
Onde:
- `M` = Montante final
- `P` = Principal (valor inicial)
- `i` = Taxa de juros (em decimal)
- `n` = Per√≠odo de tempo

Quanto antes voc√™ come√ßar a investir, mais voc√™ se beneficia do poder dos juros compostos!
""")

# Rodap√©
st.divider()
st.caption("""
‚ö†Ô∏è Esta calculadora fornece apenas uma simula√ß√£o te√≥rica. 
Resultados reais podem variar de acordo com condi√ß√µes de mercado e tributa√ß√µes.
""")
